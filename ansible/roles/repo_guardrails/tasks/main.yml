---
# ============================================================
# Repo Guardrails v1.0 (stable)
# - Preflight HEAD checks always run (even in --check)
# - Facts computed in separate steps to avoid "undefined" issues
# - RHEL9 stays on RHSM; only ensure epel-local there
# - Rocky/Alma/Stream9: define local repos; remove others; enable only ours
# ============================================================

# ---------- Early exits ----------
- name: repo_guardrails | Determine whether this host should be managed by guardrails
  ansible.builtin.set_fact:
    _is_redhat_like: "{{ ansible_facts['os_family'] == 'RedHat' }}"
    _is_el9: "{{ ansible_facts['distribution_major_version'] == '9' }}"
    _is_rhel: "{{ ansible_facts['distribution'] is match('RedHat', ignorecase=True) }}"
    _is_repo_server: "{{ 'reposync' in inventory_hostname }}"
  changed_when: false

- name: repo_guardrails | Stop here if not EL9 RedHat-like or itâ€™s the repo server
  ansible.builtin.meta: end_host
  when: not (_is_redhat_like and _is_el9) or _is_repo_server

# ---------- Preflight: prove the mirror is reachable ----------
- name: repo_guardrails | Build preflight URLs (repodata endpoints)
  ansible.builtin.set_fact:
    _preflight_urls:
      - "http://{{ repo_mirror_host }}/rocky/{{ el_major }}/BaseOS/x86_64/os/repodata/repomd.xml"
      - "http://{{ repo_mirror_host }}/rocky/{{ el_major }}/AppStream/x86_64/os/repodata/repomd.xml"
      - "http://{{ repo_mirror_host }}/rocky/{{ el_major }}/CRB/x86_64/os/repodata/repomd.xml"
      - "http://{{ repo_mirror_host }}/repos/el{{ el_major }}/epel/{{ el_major }}/Everything/x86_64/repodata/repomd.xml"
  changed_when: false

- name: repo_guardrails | Preflight | HEAD {{ item }}
  ansible.builtin.uri:
    url: "{{ item }}"
    method: HEAD
    return_content: no
    status_code: 200
    validate_certs: no
  loop: "{{ _preflight_urls }}"
  check_mode: no
  register: _preflight_results
  changed_when: false

# ---------- Detect any repo IDs already pointing at our mirror ----------
- name: repo_guardrails | Detect repo IDs whose baseurl host matches repo_mirror_host
  ansible.builtin.shell: |
    set -uo pipefail
    host="{{ repo_mirror_host }}"
    awk -v host="$host" '
      /^\[/ { gsub(/[\[\]]/, "", $0); sect=$0; next }
      /^baseurl=/ {
        url=$0; sub(/^baseurl=/,"",url)
        match(url, /^[a-z]+:\/\/([^\/]+)/, m)
        if (m[1] ~ ("^" host "(:[0-9]+)?$")) print sect
      }
    ' /etc/yum.repos.d/*.repo 2>/dev/null | sort -u
  args: { executable: /bin/bash }
  register: detected_local_repo_ids
  changed_when: false
  check_mode: no

- name: repo_guardrails | Capture detected repo IDs list
  ansible.builtin.set_fact:
    _local_ids: "{{ detected_local_repo_ids.stdout_lines | default([]) }}"

- name: repo_guardrails | Classify detected IDs (lists)
  ansible.builtin.set_fact:
    _baseos_ids:    "{{ _local_ids | select('match','(?i)baseos')    | list }}"
    _appstream_ids: "{{ _local_ids | select('match','(?i)appstream') | list }}"
    _crb_ids:       "{{ _local_ids | select('match','(?i)crb')       | list }}"
    _epel_ids:      "{{ _local_ids | select('search','(?i)epel')     | list }}"

- name: repo_guardrails | Compute readiness flag
  ansible.builtin.set_fact:
    _have_core_locals: "{{ (_baseos_ids | length > 0) and (_appstream_ids | length > 0) }}"

# ---------- RHEL 9 (RHSM) path ----------
- name: repo_guardrails | RHEL9 | Ensure epel-local exists (mirror)
  ansible.builtin.yum_repository:
    name: epel-local
    description: "EPEL {{ el_major }} - Everything (local)"
    baseurl: "http://{{ repo_mirror_host }}/repos/el{{ el_major }}/epel/{{ el_major }}/Everything/x86_64/"
    enabled: yes
    gpgcheck: no
  when: _is_rhel
  tags: ['repo_guardrails']

- name: repo_guardrails | RHEL9 info
  ansible.builtin.debug:
    msg: "RHEL9 host detected; RHSM repos left as-is. Ensured epel-local only."
  when: _is_rhel
  changed_when: false

# ---------- Rocky/Alma/Stream9 path ----------
- name: repo_guardrails | Ensure the four local repos exist (Rocky/Alma/Stream9)
  when: not _is_rhel
  block:
    - name: BaseOS local
      ansible.builtin.yum_repository:
        name: baseos-local
        description: "Rocky {{ el_major }} - BaseOS (local)"
        baseurl: "http://{{ repo_mirror_host }}/rocky/{{ el_major }}/BaseOS/x86_64/os/"
        enabled: yes
        gpgcheck: no
    - name: AppStream local
      ansible.builtin.yum_repository:
        name: appstream-local
        description: "Rocky {{ el_major }} - AppStream (local)"
        baseurl: "http://{{ repo_mirror_host }}/rocky/{{ el_major }}/AppStream/x86_64/os/"
        enabled: yes
        gpgcheck: no
    - name: CRB local
      ansible.builtin.yum_repository:
        name: crb-local
        description: "Rocky {{ el_major }} - CRB (local)"
        baseurl: "http://{{ repo_mirror_host }}/rocky/{{ el_major }}/CRB/x86_64/os/"
        enabled: yes
        gpgcheck: no
    - name: EPEL local
      ansible.builtin.yum_repository:
        name: epel-local
        description: "EPEL {{ el_major }} - Everything (local)"
        baseurl: "http://{{ repo_mirror_host }}/repos/el{{ el_major }}/epel/{{ el_major }}/Everything/x86_64/"
        enabled: yes
        gpgcheck: no
  tags: ['repo_guardrails']

# --- Build allowlist (prefer detected IDs; else fallback) ---
- name: repo_guardrails | Define fallback allowlist IDs
  ansible.builtin.set_fact:
    _fallback_ids:
      - baseos-local
      - appstream-local
      - crb-local
      - epel-local
  when: not _is_rhel

- name: repo_guardrails | Build allowlist (prefer detected IDs; else fallback)
  ansible.builtin.set_fact:
    _allow_ids: "{{ (_have_core_locals | ternary((_baseos_ids + _appstream_ids + _crb_ids + _epel_ids) | unique, _fallback_ids)) }}"
  when: not _is_rhel

- name: repo_guardrails | Ensure dnf-plugins-core is installed
  ansible.builtin.package:
    name: dnf-plugins-core
    state: present
  when: not _is_rhel

# ---------- Replace config-manager with a file move guardrail ----------
- name: repo_guardrails | Set backup dir for moved repo files
  ansible.builtin.set_fact:
    _guardrails_bak: "/etc/yum.repos.d/guardrails-{{ ansible_date_time.iso8601_basic_short }}"
  when: not _is_rhel

- name: repo_guardrails | Create backup directory
  ansible.builtin.file:
    path: "{{ _guardrails_bak }}"
    state: directory
    mode: '0755'
  when: not _is_rhel

- name: repo_guardrails | Move away all NON-local repo files (tolerant, both name styles)
  ansible.builtin.shell: |
    set -euo pipefail
    shopt -s nullglob

    keep_ids='(baseos-local|appstream-local|crb-local|epel-local|local-baseos|local-appstream|local-crb|local-epel|internal-baseos|internal-appstream|internal-crb)'

    for f in /etc/yum.repos.d/*.repo; do
      # Keep files that contain a local-only stanza OR their filename clearly marks them as local
      if grep -Eq "^\[${keep_ids}\]" "$f" \
         || [[ "$f" =~ (^|/)(local|internal).*\.(repo)$ ]] \
         || [[ "$f" =~ (^|/)(baseos|appstream|crb|epel)-local\.repo$ ]]; then
        continue
      fi
      # If immutable, drop the bit so we can move it
      chattr -i "$f" 2>/dev/null || true
      mv -f -- "$f" "{{ _guardrails_bak }}/"
    done
  args: { executable: /bin/bash }
  when: not _is_rhel
  register: _moved_repo_files
  changed_when: "_moved_repo_files.stdout is not defined or _moved_repo_files.stdout != ''"

# (we already ensured our four local repos exist & enabled: yes above)
- name: repo_guardrails | Clean & makecache
  ansible.builtin.shell: |
    dnf clean all
    dnf -y makecache
  args: { executable: /bin/bash }
  when: not _is_rhel

- name: repo_guardrails | Show enabled repos
  ansible.builtin.command: dnf repolist --enabled
  register: _enabled_repos_out
  changed_when: false
  when: not _is_rhel

- ansible.builtin.debug:
    var: _enabled_repos_out.stdout_lines
  when: not _is_rhel

