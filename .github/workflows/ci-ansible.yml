name: Ansible CI

on:
  push:
  pull_request:

jobs:
  lint-and-syntax:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install tools (ansible, ansible-lint, yamllint)
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade ansible ansible-lint yamllint

      # Non-blocking while we stabilize rules. Uses repo .yamllint if present.
      - name: Yamllint (scoped to code paths; non-blocking)
        run: |
          set -x
          # If you don't have a .yamllint yet, this keeps noise down:
          if [ ! -f .yamllint ]; then
            cat > .yamllint <<'CFG'
extends: default
ignore: |
  docs/**
  assets/**
  .github/workflows/**
CFG
          fi

          yamllint -f parsable \
            --config-file .yamllint \
            ansible/playbooks \
            ansible/roles \
            ansible/*.yml \
            inventory || true

      # Non-blocking lint while we settle on rules (honors .ansible-lint if present)
      - name: ansible-lint (non-blocking for now)
        run: |
          set -x
          if [ -f .ansible-lint ]; then
            ansible-lint -p -c .ansible-lint || true
          else
            ansible-lint -p || true
          fi

      # Still blocking: actual Ansible syntax-check for each playbook
      - name: Ansible --syntax-check (blocking)
        run: |
          set -euo pipefail
          shopt -s nullglob
          for p in ansible/playbooks/*.yml; do
            echo "::group::Syntax $p"
            ansible-playbook -i 'localhost,' -c local "$p" --syntax-check
            echo "::endgroup::"
          done
